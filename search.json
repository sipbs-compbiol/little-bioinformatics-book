[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Little Book of Bioinformatics",
    "section": "",
    "text": "Preface to A Little Book of Bioinformatics\nWelcome to A Little Book of Bioinformatics. This is an online book, under continual development, which I am building as and when topics come to mind or prominence.\nMy goal is that this online book will come to be a fairly transparent and honest reference for students in bioinformatics, and maybe for some researchers, too.\nI would be very grateful for feedback by email or through the GitHub repository Issues page"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "representing_biological_data.html",
    "href": "representing_biological_data.html",
    "title": "Representing Biological Data",
    "section": "",
    "text": "This section of the book will introduce the computational representation of biological data."
  },
  {
    "objectID": "biological_databases.html",
    "href": "biological_databases.html",
    "title": "Biological Databases",
    "section": "",
    "text": "This section of the book will introduce biological databases."
  },
  {
    "objectID": "pairwise_sequence_alignment.html",
    "href": "pairwise_sequence_alignment.html",
    "title": "Pairwise Sequence Alignment",
    "section": "",
    "text": "This section of the book will introduce the concepts, algorithms, and application of pairwise sequence alignment."
  },
  {
    "objectID": "multiple_sequence_alignment.html",
    "href": "multiple_sequence_alignment.html",
    "title": "Multiple Sequence Alignment",
    "section": "",
    "text": "This section of the book will introduce the concepts, algorithms, and application of multiple sequence alignment."
  },
  {
    "objectID": "mafft.html#where-can-i-download-mafft",
    "href": "mafft.html#where-can-i-download-mafft",
    "title": "3  MAFFT",
    "section": "3.1 Where can I download MAFFT?",
    "text": "3.1 Where can I download MAFFT?\n\nhttps://MAFFT.cbrc.jp/alignment/software/"
  },
  {
    "objectID": "mafft.html#where-can-i-use-mafft-in-a-browser",
    "href": "mafft.html#where-can-i-use-mafft-in-a-browser",
    "title": "3  MAFFT",
    "section": "3.2 Where can I use MAFFT in a browser?",
    "text": "3.2 Where can I use MAFFT in a browser?\n\nhttps://mafft.cbrc.jp/alignment/server/\nhttps://www.ebi.ac.uk/Tools/msa/MAFFT/\nhttps://usegalaxy.eu/"
  },
  {
    "objectID": "mafft.html#how-does-mafft-work",
    "href": "mafft.html#how-does-mafft-work",
    "title": "3  MAFFT",
    "section": "3.3 How does MAFFT work?",
    "text": "3.3 How does MAFFT work?\n\n3.3.1 Multiple workflows, tuned for different circumstances\nMAFFT can be used as a “black box” alignment tool, but it offers several ways to combine its components. The various combinations can be chosen to suit your alignment task or available hardware, and fall into three main categories:\n\n3.3.1.1 FFT-NS1, FFT-NS-2: progressive methods for large sequence sets\nThese approaches are simple progressive alignment workflows that take advantage of 6-tuple scoring to speed up initial distance matrix construction, and FFTs to speed up sequence and sequence group alignment.\n\nA guide tree is constructed from 6-tuple similarity scores\nA progressive alignment is performed on the guide tree (and the output alignment returned - FFT-NS-1)\nThe guide tree is reconstructed from this alignment (FFT-NS-2)\nThe sequences are realigned against the rebuilt guide tree (and the output alignment returned - FFT-NS-2)\n\nFFT-NS-2 is the default MAFFT algorithm, chosen to balance speed and accuracy (Katoh and Toh 2008a).\n\n\n3.3.1.2 FFT-NS-i: progressive method for more accurate alignments of smaller sequence sets\nThis approach resembles that for FFT-NS-2, but iterates over guide tree reconstruction and sequence realignment until either no improvement can be detected in the alignment (by Weighted Sum of Pairs, WSP), or a maximum number of iterations is reached.\n\nA guide tree is constructed from 6-tuple similarity scores\nA progressive alignment is performed on the guide tree\nThe guide tree is reconstructed from this alignment\nThe sequences are realigned against the rebuilt guide tree\nSteps 3 and 4 are repeated until there is no improvement in the alignment’s WSP score, or a maximum number of iterations is reached\n\n\n\n3.3.1.3 L-INS-i, E-INS-i, and G-INS-i: consistency scores for difficult alignment cases\nThese approaches resemble FT-NS-i in that they iterate over guide tree construction and realignment, but differ in that they carry out all-vs-all pairwise alignment initially, rather than the 6-tuple approximation, and employ a COFFEE-like consistency score alongside the WSP score, and different alignment algorithms during pairwise alignment.\n\nE-INS-i uses a global Needleman-Wunsch approach to pairwise alignment, and is suited for alignments between sequences that may have several alignable domains and a high proportion of non-alignable insertions.\nL-INS-i uses a local Smith-Waterman alignment to improve alignments where there is a single alignable domain, with non-alignable flanking sequence.\nG-INS-i uses a global Needleman-Wunsch alignment approach, and is suited to situations where it can be assumed that the entire sequence can be aligned for all inputs.\n\n\n\n\n3.3.2 Pairwise sequence, or sequence group alignment\n\n3.3.2.1 Fast Fourier Transform speed-up\nMAFFT improves on the speed of simpler progressive alignment approaches (Feng and Doolittle 1987) by using efficient algorithms to target slow steps in the process. The main advance, which gives MAFFT its name, was to use the fast Fourier Transform (FFT) - an algorithm that converts a signal from one quantitative domain, such as time, to a representation in the frequency domain - to speed up alignment of protein sequences.\nA key insight was to note that the frequency of amino acid substitutions is often determined by whether the substituting residue conserves important physicochemical properties (Katoh et al. 2002). Conservation of such properties is a feature of neutral or near-neutral substitutions. In the original paper, each amino acid (\\(a\\)) was assigned to a vector of two values, one representing the amino acid residue’s volume (\\(v(a)\\)), and one representing its polarity (\\(p(a)\\)), normalised to zero mean and unit variance over all amino acids.\nBy converting the amino acid sequences to be aligned to a sequence of these vectors, MAFFT calculates the correlation between sequences in terms of their polarity and volume components. In doing this, MAFFT considers a positional lag of \\(k\\) sites in the sequence - a parameter controlling the size of sequence region being considered, and the overall correlation is reported for this value, as \\(c(k)\\). By using a fast Fourier Transform for this operation, the CPU time for a set of \\(N\\) input sequences is reduced from \\(O(N^2)\\) to \\(O(N log N)\\).\nThis concept can be extended from an alignment between two sequences to an alignment between two already-aligned groups of sequences, by replacing the vector of volume (or polarity) values for a single sequence with a vector that is the linear combination of the volume components for the aligned group (Katoh et al. 2002).\n\n\n3.3.2.2 Finding homologous sequence segments\nIf a pair of sequences has homologous regions - conserving polarity and volume - then there will be a corresponding peak in the graph of \\(c(k)\\). This identifies the positional lag of the match, but not its location. So, to determine the actual location of the match, a sliding window analysis (window size 30) is carried out to identify local homologies for the 20 highest peaks in \\(c(k)\\). A score threshold of 0.7 per site is applied, and any window with a higher value is considered a homologous segment. Successive segments identified as homologous segments are combined, to a maximum of 150 sites per homolgous segment. Segments longer than this are divided into segments of maximum length 150 (Katoh et al. 2002).\n\n\n3.3.2.3 Aligning sequence pairs\nA matrix of homologous segments between two sequences is constructed, and the alignment obtained by the standard dynamic programming procedure (Katoh et al. 2002).\n\n\n3.3.2.4 Application to nucleotide sequences\nFor nucleotide sequences, rather than using vectors that represent amino acid side chain properties, four-dimensional vectors of A, C, G, T are used at each column. Otherwise the process is identical (Katoh et al. 2002).\n\n\n\n3.3.3 Scoring scheme\nMAFFT departs from the common approach of using an all-positive-value scoring matrix, instead adopting a normalised similarity matrix. By default, this was originally derived from a 200 PAM log-odds matrix for both protein and nucleotide alignments, and a simplified gap penalty scheme was also employed (Katoh et al. 2002). More recently, the 200 PAM matrix has been replaced as default by BLOSUM62, and the gap penalty scheme was heavily revised (Katoh and Toh 2008a).\n\n\n3.3.4 Guide tree building\nThe modified UPGMA tree building method used in the original version of MAFFT did not scale well to very large sequence sets, and was replaced in v6 onwards by the PartTree algorithm (Katoh and Toh 2008a, 2008b). This constructs an approximate tree from unaligned sequences by partitioning the dataset and is \\(O(N log N)\\) rather than \\(O(N^2)\\), like UPGMA.\n\n\n3.3.5 RNA and protein alignment incorporating structural information\nIn MAFFT v6, options were introduced to include structural information when aligning RNA sequences. This takes base pairing probability into account, and applies a novel four-way alignment consistency function (Katoh and Toh 2008a).\nMAFFT v7 introduced the ability to inform an alignment by using the ASH structural alignment program and, in particular, the inter-residue distance between alpha carbons for amino acids in the alignment. This is likely to be most useful when aligning sequence-diverse, but structurally similar, proteins (Katoh and Standley 2013).\nMAFFT has been integrated with the DASH structural alignment database, to use structural alignment information as a set of constraints on sequence alignment. This integration is available through the official MAFFT alignment server (Rozewicki et al. 2019).\n\n\n3.3.6 Extension of existing alignments with new sequences\nFurther improvements were introduced in MAFFT v7 to enable addition of unaligned sequences into an existing multiple sequence alignment (Katoh and Standley 2013).\n\n\n3.3.7 Parallelisation\nThreading was added to MAFFT v7. Progressive alignment method outputs are identical in non-threaded and threaded runs, but iterative refinement-based alignments may generate different output when threaded (Katoh and Standley 2013)."
  },
  {
    "objectID": "mafft.html#where-can-i-find-out-more-about-mafft",
    "href": "mafft.html#where-can-i-find-out-more-about-mafft",
    "title": "3  MAFFT",
    "section": "3.4 Where can I find out more about MAFFT?",
    "text": "3.4 Where can I find out more about MAFFT?\n\nMAFFT v7 tips\nMAFFT v7 algorithm\n\n\n\n\n\nFeng, Da-Fei, and Russell F Doolittle. 1987. “Progressive Sequence Alignment as a Prerequisite to Correct Phylogenetic Trees.” J. Mol. Evol. 25 (4): 351–60. https://doi.org/10.1007/BF02603120.\n\n\nKatoh, Kazutaka, Kazuharu Misawa, Kei-Ichi Kuma, and Takashi Miyata. 2002. “MAFFT: A Novel Method for Rapid Multiple Sequence Alignment Based on Fast Fourier Transform.” Nucleic Acids Res. 30 (14): 3059–66. https://doi.org/10.1093/nar/gkf436.\n\n\nKatoh, Kazutaka, John Rozewicki, and Kazunori D Yamada. 2019. “MAFFT Online Service: Multiple Sequence Alignment, Interactive Sequence Choice and Visualization.” Brief. Bioinform. 20 (4): 1160–66. https://doi.org/10.1093/bib/bbx108.\n\n\nKatoh, Kazutaka, and Daron M Standley. 2013. “MAFFT Multiple Sequence Alignment Software Version 7: Improvements in Performance and Usability.” Mol. Biol. Evol. 30 (4): 772–80. https://doi.org/10.1093/molbev/mst010.\n\n\nKatoh, Kazutaka, and Hiroyuki Toh. 2008a. “Recent Developments in the MAFFT Multiple Sequence Alignment Program.” Brief. Bioinform. 9 (4): 286–98. https://doi.org/10.1093/bib/bbn013.\n\n\n———. 2008b. “Recent Developments in the MAFFT Multiple Sequence Alignment Program.” Brief. Bioinform. 9 (4): 286–98. https://doi.org/10.1093/bib/bbn013.\n\n\nRozewicki, John, Songling Li, Karlou Mar Amada, Daron M Standley, and Kazutaka Katoh. 2019. “MAFFT-DASH: Integrated Protein Sequence and Structural Alignment.” Nucleic Acids Res. 47 (W1): W5–10. https://doi.org/10.1093/nar/gkz342."
  },
  {
    "objectID": "biological_networks.html",
    "href": "biological_networks.html",
    "title": "Biological Networks",
    "section": "",
    "text": "This section of the book will introduce network representations in biology."
  },
  {
    "objectID": "biological_structures.html",
    "href": "biological_structures.html",
    "title": "Biological Structures",
    "section": "",
    "text": "This section of the book will introduce structural data and visualisation."
  },
  {
    "objectID": "pymol.html#where-can-i-download-pymol",
    "href": "pymol.html#where-can-i-download-pymol",
    "title": "4  PyMOL",
    "section": "4.1 Where can I download PyMOL?",
    "text": "4.1 Where can I download PyMOL?\nThe official home of PyMOL is at Schrodinger Software, where you can download the “Incentive” version. This requires a licence, which is free for educational use, but not free for academic/commercial/research use.\n\nhttps://pymol.org/2/\n\nThere is an open-source, freely-licensed version of PyMOL, also provided by Schrodinger Software. This can be downloaded from GitHub and self-compiled, or obtained through homebrew:\n\nhttps://github.com/schrodinger/pymol-open-source\nhttps://formulae.brew.sh/formula/pymol"
  },
  {
    "objectID": "pymol.html#using-pymol",
    "href": "pymol.html#using-pymol",
    "title": "4  PyMOL",
    "section": "4.2 Using PyMOL",
    "text": "4.2 Using PyMOL\nStart the program from the application icon, or from the command-line (depending on which version you have installed), to obtain the landing screen (Figure 4.1).\n\n\n\nFigure 4.1: PyMOL landing screen, for the Open Source version, on macOS.\n\n\n\n4.2.1 PyMOL layout\nPymol is laid out approximately into four quadrants. Clockwise from top left in Figure 4.1 we have:\n\nThe interactive command window. At the bottom of this window is the command prompt PyMOL &gt;, where commands to control the visualisation can be typed and executed.\nThe next quadrant (top right) contains a set of function buttons providing a range of actions for control of the visualisation.\nBelow this is the object control panel, which is the main point-and-click interface for changing the way that molecules in the visualisation window appear, and below this is the mouse control legend to explain what your mouse/trackpad actions will achieve.\nFinally, at bottom left, we have the main viewer window, where your molecule will be shown."
  },
  {
    "objectID": "pymol.html#obtaining-structures",
    "href": "pymol.html#obtaining-structures",
    "title": "4  PyMOL",
    "section": "4.3 Obtaining structures",
    "text": "4.3 Obtaining structures\nPyMOL can connect directly to RCSB/PDB to download structural data, and can load structure files from your local storage.\n\n4.3.0.1 fetching structures from RCSB/PDB\nWe will download a structure directly from RCSB/PDB. To do this we will use the interactive command window. We also need to know the RCSB/PDB accession for the structure we want to view. Here, we will use the structure 4I61, a trimer of PduB, a bacterial microcompartment protein.\n\n\n\n\n\n\nPduB makes biochemical factories inside cells.\n\n\n\n\n\nPduB is a protein that trimerises to form a structural unit that then combines with other similar structural units to enclose a volume within bacterial cells, to make a kind of “factory” for chemical reactions.\nThe UniProt entry for the protein corresponding to this structure is F8DQ39\n\n\n\nTo fetch this structure from RCSB/PDB, we enter the command fetch 4I61 into the command prompt, and hit Return (Figure 4.2).\n\n\n\nFigure 4.2: PyMOL command prompt including fetch command.\n\n\nExecuting this command will produce a short report to the interactive command window, and show a rendering of the structure in the main viewer window (Figure 4.3).\n\n\n\nFigure 4.3: Initial render of 4I61 PduB structure in PyMOL.\n\n\n\n\n\n\n\n\nPyMOL downloads the fetched file.\n\n\n\n\n\nWhen executed, this command will also download the file 4I61.cif to the current working directory. You can load this file into PyMOL without requiring a live network connection."
  },
  {
    "objectID": "pymol.html#changing-the-appearance-of-the-structure",
    "href": "pymol.html#changing-the-appearance-of-the-structure",
    "title": "4  PyMOL",
    "section": "4.4 Changing the appearance of the structure",
    "text": "4.4 Changing the appearance of the structure\n\n4.4.1 Rotating the molecule\nBy default, left-clicking on the molecule in the main viewer window and moving your mouse will rotate the molecule. You can use this to obtain a viewing position that helps you understand the structure better or that, when saved as a figure, will communicate your message to a reader.\n\n\n4.4.2 Changing molecule colours\nThe object control panel provides buttons (A, S, H, L, C) that control aspects of the molecule’s appearance:\n\nA/Action\nS/Show\nH/Hide\nL/Label\nC/Colour\n\nThere are three distinct protein chains in this trimeric structure. We will colour the protein differently by chain so that we can see them more clearly.\n\n\n\n\n\n\n\nClick on the C button for 4I61 in the object control panel\nClick on by chain in the menu that appears\nClick on by chain in the new menu\n\n\n\n\nThis colours each chain in the structure differently, and also the water molecules (small dots) associated with each chain (Figure 4.4).\n\n\n\nFigure 4.4: PyMOL rendering of 4I61 with a different colour for each chain.\n\n\n\n\n4.4.3 Hiding elements of the structure\nWe sometimes want to focus attention on particular parts of a structure. To aid in this we can hide parts of the visualisation, using the H/Hide menu in the object control panel.\nFor example, to hide the water molecules that surround each chain, we would:\n\n\n\n\n\n\n\nClick on the H button for 4I61 in the object control panel\nClick on waters\n\n\n\n\nThis removes the water molecules from our visualisation (Figure 4.5).\n\n\n\nFigure 4.5: 4I61 structure with waters removed.\n\n\n\n\n4.4.4 Selecting part of the structure\nIt is possible to select parts of the structure in PyMOL by pointing and clicking using the mouse. For complicated selections especially, this can be difficult, tedious, and error-prone. It is usually better to use the interactive command window to select structural components explicitly.\n\n4.4.4.1 Selecting with indicate\nWo select only the first chain of the trimeric PduB structure (chain A), we could execute the command indicate chain A, which highlights that chain in the main visualisation window, to show that it is selected (Figure 4.6).\n\nSee that using indicate has produced a new row in the object control panel called (indicate). This allows us to control the appearance of the selected element.\n\n\n\n\nFigure 4.6: 4I61 structure with chain A highlighted.\n\n\nWith the chain selected, we can then change the way it is drawn using the S/Show menu for the (indicate) selection, and the colours used for rendering, using the corresponding C/Colour menu (Figure 4.7, Figure 4.8).\n\n\n\nFigure 4.7: Rendering 4I61 chain A structure as spheres.\n\n\n\n\n\n\n\n\nClick on the (indicate) label in the object control panel to cancel the selection.\n\n\n\n\n\n\nFigure 4.8: Rendering 4I61 chain A structure with atom colouring.\n\n\n\n\n4.4.4.2 Selecting specific residues with the sequence viewer\nBelow the mouse action legend on the right hand side of the window there is a set of control buttons. To the right of this list is a button labelled with the letter S. Clicking this button brings up the sequence viewer/selector at the top of the main image visualisation window (Figure 4.9).\n\n\n\nFigure 4.9: Activating the sequence selector.\n\n\nThe scroll bar below the sequence allows you to find any part of the protein sequence (and additional molecules in the structure). The symbols are coloured to match the current structural representation, to aid with locating specific residues. For instance, in ?fig-selecting_residues the residues for chain B are coloured in cyan. Residues can be selected by clicking and dragging within the displayed sequence, and the current selection is highlighted as (sele) in the object control panel. We can also select discontinuous sections of the structure, as in Figure 4.11.\n\n\n\nFigure 4.10: Selecting chain residues in PyMOL using the sequence viewer/selector\n\n\n\n\n\nFigure 4.11: Selecting discontinuous residues in PyMOL using the sequence viewer/selector"
  },
  {
    "objectID": "chimerax.html#where-can-i-download-chimerax",
    "href": "chimerax.html#where-can-i-download-chimerax",
    "title": "5  ChimeraX",
    "section": "5.1 Where can I download ChimeraX?",
    "text": "5.1 Where can I download ChimeraX?\nChimeraX is available from the UC San Francisco website.\n\nhttps://www.cgl.ucsf.edu/chimerax/download.html"
  },
  {
    "objectID": "signatures_of_evolution.html",
    "href": "signatures_of_evolution.html",
    "title": "Signatures of Evolution",
    "section": "",
    "text": "This section of the book will introduce phylogenetics and related approaches."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Feng, Da-Fei, and Russell F Doolittle. 1987. “Progressive Sequence\nAlignment as a Prerequisite to Correct Phylogenetic Trees.”\nJ. Mol. Evol. 25 (4): 351–60. https://doi.org/10.1007/BF02603120.\n\n\nKatoh, Kazutaka, Kazuharu Misawa, Kei-Ichi Kuma, and Takashi Miyata.\n2002. “MAFFT: A Novel Method for Rapid Multiple\nSequence Alignment Based on Fast Fourier Transform.” Nucleic\nAcids Res. 30 (14): 3059–66. https://doi.org/10.1093/nar/gkf436.\n\n\nKatoh, Kazutaka, John Rozewicki, and Kazunori D Yamada. 2019.\n“MAFFT Online Service: Multiple Sequence Alignment,\nInteractive Sequence Choice and Visualization.” Brief.\nBioinform. 20 (4): 1160–66. https://doi.org/10.1093/bib/bbx108.\n\n\nKatoh, Kazutaka, and Daron M Standley. 2013. “MAFFT\nMultiple Sequence Alignment Software Version 7: Improvements in\nPerformance and Usability.” Mol. Biol. Evol. 30 (4):\n772–80. https://doi.org/10.1093/molbev/mst010.\n\n\nKatoh, Kazutaka, and Hiroyuki Toh. 2008a. “Recent Developments in\nthe MAFFT Multiple Sequence Alignment Program.”\nBrief. Bioinform. 9 (4): 286–98. https://doi.org/10.1093/bib/bbn013.\n\n\n———. 2008b. “Recent Developments in the MAFFT\nMultiple Sequence Alignment Program.” Brief. Bioinform.\n9 (4): 286–98. https://doi.org/10.1093/bib/bbn013.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nRozewicki, John, Songling Li, Karlou Mar Amada, Daron M Standley, and\nKazutaka Katoh. 2019. “MAFFT-DASH: Integrated Protein\nSequence and Structural Alignment.” Nucleic Acids Res.\n47 (W1): W5–10. https://doi.org/10.1093/nar/gkz342."
  }
]